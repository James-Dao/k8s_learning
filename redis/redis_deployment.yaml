kind: Namespace
apiVersion: v1
metadata:
  name: myns
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: haproxy
  namespace: myns
spec:
  serviceName: haproxy
  replicas: 1
  template:
    metadata:
      labels:
        app: haproxy
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "init-rabbitmq-first",
                "image": "busybox",
                "command": ["sh", "-c", "until nslookup slave1; do echo waiting for slave1; sleep 2; done;"]
            }
        ]'

    spec:
      containers:
      - name: haproxy
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/haproxy-redis
        env:
        - name : REDIS_AUTH_PASSWORD
          value: "ppaasssswwoorrdd"
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
  namespace: myns
  labels:
    app: haproxy
spec:
  ports:
  - port: 6379
    name: haproxy
    protocol: TCP
    targetPort: 6379
    nodePort: 30011

  type: NodePort
  selector:
    app: haproxy
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: redis-master
  namespace: myns
spec:
  serviceName: redis-master
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-master
    spec:
      containers:
      - name: redis
        imagePullPolicy: IfNotPresent
        image: daocloud.io/library/redis:3.2.8
        command: ["bash", "-c"]
        args: ["/usr/local/bin/docker-entrypoint.sh --appendonly yes --masterauth ppaasssswwoorrdd --requirepass ppaasssswwoorrdd"]
---
apiVersion: v1
kind: Service
metadata:
  name: master
  namespace: myns
  labels:
    app: redis-master
spec:
  ports:
  - port: 6379
    name: redis-master
    protocol: TCP
    targetPort: 6379

  clusterIP: None
  selector:
    app: redis-master
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: redis-slave0
  namespace: myns
spec:
  serviceName: redis-slave0
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-slave0
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "init-rabbitmq-first",
                "image": "busybox",
                "command": ["sh", "-c", "until nslookup master; do echo waiting for masterr; sleep 2; done;"]
            }
        ]'

    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - redis-master
              topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - redis-slave1
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: redis
        imagePullPolicy: IfNotPresent
        image: daocloud.io/library/redis:3.2.8
        command: ["bash", "-c"]
        args: ["/usr/local/bin/docker-entrypoint.sh redis-server --slaveof master 6379 --appendonly yes --masterauth ppaasssswwoorrdd --requirepass ppaasssswwoorrdd"]
        env:
        - name : REDIS_AUTH_PASSWORD
          value: "ppaasssswwoorrdd"
---
apiVersion: v1
kind: Service
metadata:
  name: slave
  namespace: myns
  labels:
    app: redis-slave
spec:
  ports:
  - port: 6379
    name: redis-slave
    protocol: TCP
    targetPort: 6379

  clusterIP: None
  selector:
    app: redis-slave0
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: redis-sentinel
  namespace: myns
spec:
  serviceName: redis-sentinel
  replicas: 3
  template:
    metadata:
      labels:
        app: redis-sentinel
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "init-rabbitmq-first",
                "image": "busybox",
                "command": ["sh", "-c", "until nslookup slave1; do echo waiting for slave1; sleep 2; done;"]
            }
        ]'

    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - redis-sentinel
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: redis
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/redis-sentinel
        env:
        - name : REDIS_AUTH_PASSWORD
          value: "ppaasssswwoorrdd"
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: redis-slave1
  namespace: myns
spec:
  serviceName: redis-slave1
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-slave1
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "init-rabbitmq-first",
                "image": "busybox",
                "command": ["sh", "-c", "until nslookup slave; do echo waiting for slave; sleep 2; done;"]
            }
        ]'

    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - redis-slave0
              topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - redis-master
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: redis
        imagePullPolicy: IfNotPresent
        image: daocloud.io/library/redis:3.2.8
        command: ["bash", "-c"]
        args: ["/usr/local/bin/docker-entrypoint.sh redis-server --slaveof master 6379 --appendonly yes --masterauth ppaasssswwoorrdd --requirepass ppaasssswwoorrdd"]
        env:
        - name : REDIS_AUTH_PASSWORD
          value: "ppaasssswwoorrdd"
---
apiVersion: v1
kind: Service
metadata:
  name: slave1
  namespace: myns
  labels:
    app: redis-slave1
spec:
  ports:
  - port: 6379
    name: redis-slave1
    protocol: TCP
    targetPort: 6379

  clusterIP: None
  selector:
    app: redis-slave1

