kind: Namespace
apiVersion: v1
metadata:
  name: {{ usernamespace }}
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: rabbitmq1
  namespace: {{ usernamespace }}
spec:
  serviceName: rabbitmq1
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq1
      annotations:
        io.daocloud.service.role: "master"
        io.daocloud.compose.endpoint-spec.mode: "dnsrr"
        io.daocloud.compose.placement.constraints: "[\"node.labels.servicepool1 == servicepool1\"]"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - rabbitmq2
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:   
        haspx: yep
      containers:
      - name: rabbitmq
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/rabbitmq-ha-server:dce
        volumeMounts:
        - name: rabbitmq1
          mountPath: "/var/lib/rabbitmq"
        env:
        - name : CLUSTERED
          value: '''true'''
        - name : STARTORDER
          value: "0"
        - name : HOSTNAME
          value: "rabbit1"
        - name : RABBITMQ_ERLANG_COOKIE
          value: {{ password }}{{ password }}
        - name : RABBITMQ_DEFAULT_USER
          value: "admin"
        - name : RABBITMQ_DEFAULT_PASS
          value: {{ password }}
        - name : RABBITMQ_LOGS
          value: "/var/log/rabbitmq/rabbit.log"
      volumes:
      - name: rabbitmq1
        persistentVolumeClaim:
          claimName: pvcs00
---
apiVersion: v1
kind: Service
metadata:
  name: rabbit1
  namespace: {{ usernamespace }}
  labels:
    app: rabbitmq1
spec:
  ports:
  - port: 5672
    name: rabbitmq11
    protocol: TCP
    targetPort: 5672
  - port: 15672
    name: rabbitmq12
    protocol: TCP
    targetPort: 15672

  clusterIP: None
  selector:
    app: rabbitmq1
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: rabbitmq2
  namespace: {{ usernamespace }}
spec:
  serviceName: rabbitmq2
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq2
      annotations:
        io.daocloud.service.role: "slave"
        io.daocloud.compose.endpoint-spec.mode: "dnsrr"
        io.daocloud.compose.placement.constraints: "[\"node.labels.servicepool2 == servicepool2\"]"
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "init-rabbitmq-first",
                "image": "daocloud.io/weakiwi/nslookup:master-e2fdc87",
                "args": ["rabbit1"]
            }
        ]'
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - rabbitmq3
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:   
        haspx: yep
      containers:
      - name: rabbitmq
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/rabbitmq-ha-server:dce
        volumeMounts:
        - name: rabbitmq2
          mountPath: "/var/lib/rabbitmq"
        env:
        - name : CLUSTERED
          value: '''true'''
        - name : STARTORDER
          value: "1"
        - name : HOSTNAME
          value: "rabbit2"
        - name : CLUSTER_WITH
          value: "rabbit1"
        - name : RABBITMQ_ERLANG_COOKIE
          value: {{ password }}{{ password }}
        - name : RABBITMQ_DEFAULT_USER
          value: "admin"
        - name : RABBITMQ_DEFAULT_PASS
          value: {{ password }}
        - name : RABBITMQ_LOGS
          value: "/var/log/rabbitmq/rabbit.log"
        - name : ADDRESS
          value: "rabbit1:5672,rabbit1:15672"
      volumes:
      - name: rabbitmq2
        persistentVolumeClaim:
          claimName: pvcs001
---
apiVersion: v1
kind: Service
metadata:
  name: rabbit2
  namespace: {{ usernamespace }}
  labels:
    app: rabbitmq2
spec:
  ports:
  - port: 5672
    name: rabbitmq21
    protocol: TCP
    targetPort: 5672
  - port: 15672
    name: rabbitmq22
    protocol: TCP
    targetPort: 15672

  clusterIP: None
  selector:
    app: rabbitmq2
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: rabbitmq3
  namespace: {{ usernamespace }}
spec:
  serviceName: rabbitmq3
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq3
      annotations:
        io.daocloud.service.role: "slave"
        io.daocloud.compose.endpoint-spec.mode: "dnsrr"
        io.daocloud.compose.placement.constraints: "[\"node.labels.servicepool3 == servicepool3\"]"
        pod.beta.kubernetes.io/init-containers: '[
            {
                "name": "init-rabbitmq-first",
                "image": "daocloud.io/weakiwi/nslookup:master-e2fdc87",
                "args": ["rabbit2"]
            }
        ]'
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - rabbitmq1
              topologyKey: "kubernetes.io/hostname"
      nodeSelector:   
        haspx: yep
      containers:
      - name: rabbitmq
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/rabbitmq-ha-server:dce
        volumeMounts:
        - name: rabbitmq3
          mountPath: "/var/lib/rabbitmq"
        env:
        - name : CLUSTERED
          value: '''true'''
        - name : STARTORDER
          value: "2"
        - name : CLUSTER_WITH
          value: "rabbit1"
        - name : HOSTNAME
          value: "rabbit3"
        - name : RABBITMQ_ERLANG_COOKIE
          value: {{ password }}{{ password }}
        - name : RABBITMQ_DEFAULT_USER
          value: "admin"
        - name : RABBITMQ_DEFAULT_PASS
          value: {{ password }}
        - name : RABBITMQ_LOGS
          value: "/var/log/rabbitmq/rabbit.log"
        - name : ADDRESS
          value: "rabbit1:5672,rabbit1:15672"
      volumes:
      - name: rabbitmq3
        persistentVolumeClaim:
          claimName: pvcs002
---
apiVersion: v1
kind: Service
metadata:
  name: rabbit3
  namespace: {{ usernamespace }}
  labels:
    app: rabbitmq3
spec:
  ports:
  - port: 5672
    name: rabbitmq31
    protocol: TCP
    targetPort: 5672
  - port: 15672
    name: rabbitmq32
    protocol: TCP
    targetPort: 15672

  clusterIP: None
  selector:
    app: rabbitmq3
---
apiVersion: v1
kind: Pod
metadata:
  name: haproxy
  namespace: {{ usernamespace }}
  labels:
    app: haproxy
  annotations:
    io.daocloud.service.role: "proxy"
    io.daocloud.service.console: "true"
    pod.beta.kubernetes.io/init-containers: '[
        {
            "name": "init-rabbitmq",
            "image": "daocloud.io/weakiwi/nslookup:master-e2fdc87",
            "args": ["rabbit3"]
        }
    ]'
spec:
  containers:
  - name: haproxy
    image: daocloud.io/daocloud/haproxy:1.4-rabbitmq
    env: 
    - name : RABBITMQ_DEFAULT_PASS
      value: {{ password }}
    - name : STARTORDER
      value: "3"
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
  namespace: {{ usernamespace }}
  labels:
    app: haproxy
spec:
  ports:
  - port: 5672
    name: rabbitmq21
    protocol: TCP
    targetPort: 5672
    nodePort: 30002
  - port: 15672
    name: rabbitmq22
    protocol: TCP
    targetPort: 15672
    nodePort: 30001

  #clusterIP: None
  type: NodePort
  selector:
    app: rabbitmq2
---
kind: StorageClass
apiVersion: storage.k8s.io/v1beta1
metadata:
  name: portworx
  namespace: {{ usernamespace }}
provisioner: kubernetes.io/portworx-volume
parameters:
  repl: "1"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvcs00
  namespace: {{ usernamespace }}
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvcs001
  namespace: {{ usernamespace }}
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvcs002
  namespace: {{ usernamespace }}
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
