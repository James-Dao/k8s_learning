kind: Namespace
apiVersion: v1
metadata:
  name: myns
  annotations:
    net.beta.kubernetes.io/network-policy: |
      {
        "ingress": {
          "isolation": "DefaultDeny"
        }
      }
---
kind: NetworkPolicy
apiVersion: extensions/v1beta1 
metadata:
  name: allow-master-to-slave
  namespace: myns
spec:
  podSelector:            
    matchLabels:
      app: "mysql-slave"
  ingress:                
    - from:              
        - podSelector:
            matchLabels:
              app: "mysql-master"
      ports:
        - protocol: TCP
          port: 3306
---

kind: NetworkPolicy
apiVersion: extensions/v1beta1 
metadata:
  name: allow-slave-to-master
  namespace: myns
spec:
  podSelector:            
    matchLabels:
      app: "mysql-master"
  ingress:                
    - from:              
        - podSelector:
            matchLabels:
              app: "mysql-slave"
      ports:
        - protocol: TCP
          port: 3306
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: myns
data:
  mysql-root-user: "root"
  mysql-user-pass: "root"
  mysql-svc-name: "mysql-master"
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-master
  namespace: myns
  labels:
    app: mysql-master
spec:
  ports:
  - port: 3306
    name: mysql-port
    protocol: TCP
    targetPort: 3306
    nodePort: 30015
  type: NodePort

  selector:
    app: mysql-master
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: mysql-budget
  namespace: myns
spec:
  selector:
    matchLabels:
      app: mysql
  minAvailable: 2
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mysql-master
  namespace: myns
spec:
  serviceName: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-master
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - mysql-slave
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: mysql-ha
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/mysql-ha
        volumeMounts:
        - name: master
          mountPath: "/etc/mysql"
        volumeMounts:
        - name: master
          mountPath: "/var/lib/mysql"
        resources:
          requests:
            memory: "100Mi"
        ports:
        - containerPort: 3306
          name: mysql-all
        env:
        - name : REPLICATION_MASTER
          value: '''true'''
        - name : MYSQL_USER
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-root-user
        - name : MYSQL_PASS
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-user-pass
      volumes:
      - name: master
        persistentVolumeClaim:
          claimName: pvcs001
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: mysql-slave
  namespace: myns
spec:
  serviceName: mysql
  replicas: 2
  template:
    metadata:
      labels:
        app: mysql-slave
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - mysql-master
              topologyKey: "kubernetes.io/hostname"
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app"
                  operator: In
                  values:
                  - mysql-slave
              topologyKey: kubernetes.io/hostname
      containers:
      - name: mysql-ha
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/mysql-ha
        volumeMounts:
        - name: slave
          mountPath: "/etc/mysql"
        volumeMounts:
        - name: slave
          mountPath: "/var/lib/mysql"
        resources:
          requests:
            memory: "100Mi"
        ports:
        - containerPort: 3306
          name: mysql-all
        env:
        - name : REPLICATION_SLAVE
          value: '''true'''
        - name : MYSQL_USER
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-root-user
        - name : MYSQL_PASS
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-user-pass
        - name : MYSQL_PORT_3306_TCP_ADDR
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-svc-name
        - name : MYSQL_PORT_3306_TCP_PORT
          value: "3306"
        - name : MYSQL_ENV_REPLICATION_USER
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-root-user 
        - name : MYSQL_ENV_REPLICATION_PASS
          valueFrom:
            configMapKeyRef:
                name: mysql-config
                key: mysql-user-pass
      volumes:
      - name: slave
        persistentVolumeClaim:
          claimName: pvcs002
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvcs001
  namespace: myns
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvcs002
  namespace: myns
  annotations:
    volume.beta.kubernetes.io/storage-class: portworx
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
