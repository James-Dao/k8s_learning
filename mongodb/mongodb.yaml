kind: Namespace
apiVersion: v1
metadata:
  name: myns1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-config
  namespace: myns1
data:
  mongo-user: "admin"
  mongo-pass: "admin"
  mongo-database: "dbtest"
  mongo-app : "apptest"
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: mongos0
  namespace: myns1
spec:
  serviceName: mongos0
  replicas: 1
  template:
    metadata:
      labels:
        app: mongos0
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - mongo
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: mongo-ha
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/mongo-ha
        args: "--replSet rs0 --auth --keyFile /etc/mongo_key"
        env:
        - name : replSet
          value: "rs0"
        - name : MONGODB_USER
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-user
        - name : MONGODB_PASS
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-pass
        - name : MONGODB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-database
---
apiVersion: v1
kind: Service
metadata:
  name: mongos0
  namespace: myns1
  labels:
    app: mongos0
spec:
  ports:
  - port: 27017
    name: rabbitmq11
    protocol: TCP
    targetPort: 27017

  clusterIP: None
  selector:
    app: mongos
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: mongos1
  namespace: myns1
spec:
  serviceName: mongos1
  replicas: 1
  template:
    metadata:
      labels:
        app: mongos1
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - mongo
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: mongo-ha
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/mongo-ha
        args: "--replSet rs0 --auth --keyFile /etc/mongo_key"
        env:
        - name : replSet
          value: "rs0"
        - name : MONGODB_USER
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-user
        - name : MONGODB_PASS
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-pass
        - name : MONGODB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-database
---
apiVersion: v1
kind: Service
metadata:
  name: mongos1
  namespace: myns1
  labels:
    app: mongos1
spec:
  ports:
  - port: 27017
    name: rabbitmq11
    protocol: TCP
    targetPort: 27017

  clusterIP: None
  selector:
    app: mongos
---
kind: StatefulSet
apiVersion: apps/v1beta1
metadata:
  name: express
  namespace: myns1
spec:
  serviceName: express
  replicas: 1
  template:
    metadata:
      labels:
        app: express
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - mongos
              topologyKey: "kubernetes.io/hostname"

      containers:
      - name: mongo-express
        imagePullPolicy: IfNotPresent
        image: daocloud.io/daocloud/mongo-express:rs
        env:
        - name : ME_CONFIG_MONGODB_SERVER
          value: "mongop0,mongos1,mongos0"
        - name : ME_CONFIG_MONGODB_ENABLE_ADMIN
          value: '''true'''
        - name : ME_CONFIG_MONGODB_ADMINUSERNAME
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-user
        - name : ME_CONFIG_MONGODB_ADMINPASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-pass
        - name : ME_CONFIG_MONGODB_AUTH_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-user
        - name : ME_CONFIG_MONGODB_AUTH_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-pass
        - name : ME_CONFIG_BASICAUTH_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-user
        - name : ME_CONFIG_BASICAUTH_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-pass
        - name : USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-user
        - name : PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-pass
        - name : 
          value: "mongop0:27017,mongos1:27017,mongos0:27017"
---
apiVersion: v1
kind: Service
metadata:
  name: rabbit2
  namespace: myns1
  labels:
    app: express
spec:
  ports:
  - port: 8081
    name: rabbitmq21
    protocol: TCP
    targetPort: 8081

  clusterIP: None
  selector:
    app: express
